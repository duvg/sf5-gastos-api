App\Entity\User:
  attributes:
    normalization_context:
      groups: ['user_read']
    filters:
      - app.user.search_filter
      - ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\DateFilter
      - ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\BooleanFilter

  collectionOperations:
    get:
      method: 'GET'
      security: 'is_granted("USER_READ")'
    register:
      method: 'POST'
      path: '/users/register'
      controller: 'App\Api\Action\User\Register'
      denormalization_context:
        groups: ['user_post']
      openapi_context:
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
    upload_avatar:
      method: 'post'
      path: 'users/{id}/avatar'
      controller: 'App\Api\Action\User\UploadAvatar'
      deserialize: false
      openapi_context:
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
                    format: binary

  itemOperations:
    get:
      method: 'GET'
      security: 'is_granted("USER_READ", object)'
    put:
      method: 'PUT'
      security: 'is_granted("USER_UPDATE", object)'
      denormalization_context:
        groups: ['user_put']
      openapi_context:
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
                  roles:
                    type: array
                    items:
                      type: string
    delete:
      method: 'DELETE'
      security: 'is_granted("USER_DELETE", object)'

  properties:
    groups:
      subresource:
        subresourceClass: 'App\Entity\User'
        collection: true
        maxDepth: 1
    categories:
      subresource:
        subresourceClass: 'App\Entity\Category'
        collection: true
        maxDepth: 1
    expenses:
      subresource:
        subresourceClass: 'App\Entity\Expense'
        collection: true
        maxDepth: 1